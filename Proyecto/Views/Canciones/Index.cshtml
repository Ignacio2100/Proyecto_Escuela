@using Proyecto.Models;
@model Proyecto.Controllers.CancionesController.CancionViewModel
@{
    ViewBag.Title = "Canciones";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agregar Nuevo Elemento</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auUfh6cCxD9ep46jGib9MT1sU4nS0KC70Qb9F" crossorigin="anonymous">

    <style>

        .form-control {
            min-width: 100%;
        }

        .card {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* Espacia el contenido de la tarjeta */
        }

        .card-text {
            text-align: justify; /* Justifica el texto en el cuerpo de la tarjeta */
        }

        .btn-speak {
            align-self: center; /* Centra el botón horizontalmente */
            margin-top: auto; /* Empuja el botón al final del cuerpo de la tarjeta */
        }

        .card-img-top {
            width: 100%; /* Hace que la imagen ocupe todo el ancho del contenedor de la tarjeta */
            height: 350px;
            object-fit: cover; /* Asegura que la imagen cubra el área sin distorsionar */
        }

        h3 {
            color: #1E90FF; /* Color de texto brillante */
            margin-bottom: 20px;
            font-size: 2.5rem; /* Tamaño de fuente grande */
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Sombra para mayor impacto */
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="p-4 shadow bg-white rounded">
                    <div class="text-center mb-3">
                        <h3 class=" text-xxl-center">Agregar Canción</h3>
                    </div>
                    @using (Html.BeginForm("Agregar", "Canciones", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="row mb-4">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Cancion.Nombre, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Cancion.Nombre, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.Cancion.Nombre, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Cancion.Link, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Cancion.Link, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.Cancion.Link, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Cancion.ImagenUrl, "Imagen", new { @class = "form-label", required = "required" })
                                <input type="file" class="form-control" id="ImagenUrl" name="upload" accept=".jpg, .jpeg, .png">
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-12">
                                @Html.LabelFor(m => m.Cancion.Descripcion, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.Cancion.Descripcion, new { @class = "form-control", rows = "5", style = "width: 100%; box-sizing: border-box;", required = "required" })
                                @Html.ValidationMessageFor(m => m.Cancion.Descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn-primary">Guardar Elemento</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Mostrar mensaje de error si no se puede conectar a la base de datos -->
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger text-center">
            @ViewBag.ErrorMessage
        </div>
    }

    <div class="card-header m-4 text-xxl-center ">
        <h3 class="mb-0">Listado de Canciones</h3>
    </div>

    <div class="accordion" id="frutaAccordion">
        <!-- Fruta -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="frutaHeading">
                <button class="accordion-button text-center fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#frutaCollapse" aria-expanded="true" aria-controls="frutaCollapse">
                    Despliega
                </button>
            </h2>
            <div id="frutaCollapse" class="accordion-collapse collapse show" aria-labelledby="frutaHeading" data-bs-parent="#frutaAccordion">
                <div class="accordion-body">
                    <div class="row">

                        @foreach (var canciones in Model.ListaCanciones)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(canciones.ImagenUrl))
                                    {
                                        <img src="@Url.Content(canciones.ImagenUrl)" class="card-img-top" alt="@canciones.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@canciones.Nombre</h5>
                                        <p class="card-text">@canciones.Descripcion</p>
                                        <div class="d-flex justify-content-around">
                                            <a href="@canciones.Link" class="btn btn-primary" target="_blank">Ver Canción</a>
                                            <button class="btn btn-primary btn-speak" data-text="@canciones.Descripcion">
                                                <i class="fas fa-volume-up"></i> Escuchar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }


                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="row justify-content-center mt-4 mb-4">
        <div class="col-auto">
            <a href="@Url.Action("Index", "Home")" class="btn btn-warning">Regresar</a>
        </div>
    </div>

</body>
</html>

@section Scripts {


    <script>


        function speak(text) {
            if ('speechSynthesis' in window) {
                // Cancel any ongoing speech synthesis
                window.speechSynthesis.cancel();

                const maxChunkLength = 200; // Maximum length of each chunk
                let chunks = [];

                // Function to split the text into chunks
                function splitTextIntoChunks(text) {
                    while (text.length > 0) {
                        let chunk = text.slice(0, maxChunkLength);
                        let lastSpaceIndex = chunk.lastIndexOf(' ');
                        if (lastSpaceIndex > 0 && text.length > maxChunkLength) {
                            chunk = chunk.slice(0, lastSpaceIndex);
                        }
                        chunks.push(chunk);
                        text = text.slice(chunk.length).trim();
                    }
                }

                splitTextIntoChunks(text);

                let utterance = new SpeechSynthesisUtterance();
                utterance.lang = 'es-ES';
                utterance.rate = 0.7;
                utterance.pitch = 1.3;

                // Set the voice
                let voices = window.speechSynthesis.getVoices();
                utterance.voice = voices.find(voice => voice.lang === 'es-ES' && voice.name.includes('Female')) || voices[0];

                let currentChunk = 0;

                utterance.onend = () => {
                    currentChunk++;
                    if (currentChunk < chunks.length) {
                        utterance.text = chunks[currentChunk];
                        window.speechSynthesis.speak(utterance);
                    }
                };

                utterance.onerror = (event) => {
                    console.error('SpeechSynthesisUtterance.onerror', event);
                };

                // Start speaking
                utterance.text = chunks[0];
                window.speechSynthesis.speak(utterance);

            } else {
                alert('Lo siento, tu navegador no soporta la síntesis de voz.');
            }
        }

        $(document).ready(function () {
            $('.btn-speak').on('click', function () {
                var text = $(this).data('text');
                speak(text);
            });

            // Ensure voices are loaded
            speechSynthesis.onvoiceschanged = () => {
                window.speechSynthesis.getVoices();
            };
        });
    </script>
}
