@using Proyecto.Models;
@model Proyecto.Controllers.FrutaController.ElementoViewModel
@{
    ViewBag.Title = "Tipos de Frutas y Verduras";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agregar Nuevo Elemento</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auUfh6cCxD9ep46jGib9MT1sU4nS0KC70Qb9F" crossorigin="anonymous">


    <style>

        .form-control {
            min-width: 100%;
        }

        .card {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* Espacia el contenido de la tarjeta */
        }

        .card-text {
            text-align: justify; /* Justifica el texto en el cuerpo de la tarjeta */
        }

        .btn-speak {
            align-self: center; /* Centra el botón horizontalmente */
            margin-top: auto; /* Empuja el botón al final del cuerpo de la tarjeta */
        }

        .card-img-top {
            width: 100%; /* Hace que la imagen ocupe todo el ancho del contenedor de la tarjeta */
            height: 350px;
            object-fit: cover; /* Asegura que la imagen cubra el área sin distorsionar */
        }

        h3 {
            color: #1E90FF; /* Color de texto brillante */
            margin-bottom: 20px;
            font-size: 2.5rem; /* Tamaño de fuente grande */
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Sombra para mayor impacto */
            text-align: center;
        }

        .memory-game-container {
            background-color: #f0f8ff; /* Fondo azul claro */
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .memory-card {
            width: 120px;
            height: 120px;
            margin: 10px;
            perspective: 1000px;
            cursor: pointer;
            transition: transform 0.3s;
        }

            .memory-card:hover {
                transform: scale(1.05);
            }

        .memory-card-inner {
            width: 100%;
            height: 100%;
            transition: transform 0.6s;
            transform-style: preserve-3d;
            position: relative;
        }

        .memory-card.flipped .memory-card-inner {
            transform: rotateY(180deg);
        }

        .memory-card-front, .memory-card-back {
            width: 100%;
            height: 100%;
            position: absolute;
            backface-visibility: hidden;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: #fff;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .memory-card-front {
            background: linear-gradient(45deg, #ff9a9e, #fad0c4);
        }

        .memory-card-back {
            background-color: #fff;
            transform: rotateY(180deg);
        }

            .memory-card-back img {
                width: 90%;
                height: 90%;
                object-fit: contain;
            }

        #congratulationsModal .modal-content {
            background-color: #fff5e6;
            border: none;
            border-radius: 15px;
        }

        #congratulationsModal .modal-header {
            background-color: #ffd700;
            color: #ffffff;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
        }

        #congratulationsModal .modal-body {
            font-size: 1.2em;
        }

        #congratulationsModal .btn-primary {
            background-color: #4CAF50;
            border: none;
        }

            #congratulationsModal .btn-primary:hover {
                background-color: #45a049;
            }


        .coloring-activity {
            max-width: 800px;
            margin: auto;
            background-color: white;
            border-radius: 8px;
            padding: 40px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

            .coloring-activity h2 {
                text-align: center;
                margin-bottom: 20px;
            }

        .color-palette {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .color {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #ccc;
        }

        .drawing-area {
            position: relative;
            border: 2px solid #ccc;
            height: 410px;
            background-image: url('../.././Imagenes/Colorea.png');
            background-size: cover;
            background-position: center;
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

            .controls button, .controls input {
                padding: 10px;
                font-size: 16px;
                cursor: pointer;
                border-radius: 5px;
                border: 1px solid #ccc;
            }
    </style>
</head>
<body>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="p-4 shadow bg-white rounded">
                    <div class="text-center mb-3">
                        <h3 class=" text-xxl-center">Agregar Nuevo Elemento</h3>
                    </div>
                    @using (Html.BeginForm("Agregar", "Fruta", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="row mb-4">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoElemento.Nombre, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.NuevoElemento.Nombre, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoElemento.Nombre, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoElemento.TipoElemento, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.NuevoElemento.TipoElemento, new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Seleccione un tipo", Value = "", Disabled = true, Selected = true },
                                    new SelectListItem { Text = "Fruta", Value = "Fruta" },
                                    new SelectListItem { Text = "Verdura", Value = "Verdura" },
                                }, new { @class = "form-select", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoElemento.TipoElemento, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoElemento.ImagenUrl, "Imagen", new { @class = "form-label", required = "required" })
                                <input type="file" class="form-control" id="ImagenUrl" name="upload" accept=".jpg, .jpeg, .png">
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-12">
                                @Html.LabelFor(m => m.NuevoElemento.Descripcion, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.NuevoElemento.Descripcion, new { @class = "form-control", rows = "5", style = "width: 100%; box-sizing: border-box;", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoElemento.Descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn-primary">Guardar Elemento</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Mostrar mensaje de error si no se puede conectar a la base de datos -->
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger text-center">
            @ViewBag.ErrorMessage
        </div>
    }

    <div class="card-header m-4 text-xxl-center ">
        <h3 class="mb-0">Tipos de Verduras y Frutas</h3>
    </div>

    <div class="accordion" id="frutaAccordion">
        <!-- Fruta -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="frutaHeading">
                <button class="accordion-button text-center fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#frutaCollapse" aria-expanded="true" aria-controls="frutaCollapse">
                    Frutas
                </button>
            </h2>
            <div id="frutaCollapse" class="accordion-collapse collapse show" aria-labelledby="frutaHeading" data-bs-parent="#frutaAccordion">
                <div class="accordion-body">
                    <div class="row">

                        @foreach (var frutas in Model.ListaFrutas)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(frutas.ImagenUrl))
                                    {
                                        <img src="@Url.Content(frutas.ImagenUrl)" class="card-img-top" alt="@frutas.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@frutas.Nombre</h5>
                                        <p class="card-text">@frutas.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@frutas.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }


                    </div>
                </div>
            </div>
        </div>

        <!-- Verduras -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="verduraHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#verduraCollapse" aria-expanded="false" aria-controls="verduraCollapse">
                    Verduras
                </button>
            </h2>
            <div id="verduraCollapse" class="accordion-collapse collapse" aria-labelledby="verduraHeading" data-bs-parent="#frutaAccordion">
                <div class="accordion-body">
                    <div class="row">


                        @foreach (var verduras in Model.ListaVerduras)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(verduras.ImagenUrl))
                                    {
                                        <img src="@Url.Content(verduras.ImagenUrl)" class="card-img-top" alt="@verduras.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@verduras.Nombre</h5>
                                        <p class="card-text">@verduras.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@verduras.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }


                    </div>
                </div>
            </div>
        </div>

    </div>



    <div class="card-header m-4 text-xxl-center">
        <h3 class="mb-0">Juego de Memoria de Frutas y Verduras</h3>
    </div>
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-12 text-center mb-3">
                <h4>Intentos: <span id="attempts">0</span></h4>
            </div>
        </div>
        <div class="row justify-content-center" id="memory-game">
            <!-- Las tarjetas del juego se generarán aquí dinámicamente con JavaScript -->
        </div>
    </div>

    <!-- Modal de Felicitaciones -->
    <div class="modal fade" id="congratulationsModal" tabindex="-1" aria-labelledby="congratulationsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" id="modalContent">
                <div class="modal-header d-flex justify-content-center">
                    <h5 class="modal-title text-center w-100" id="congratulationsModalLabel">¡Felicitaciones!</h5>
                    <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <p>¡Has completado el juego de memoria!</p>
                    <p>Número total de intentos: <span id="finalAttempts"></span></p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal" onclick="location.reload();">Cerrar</button>
                    <button type="button" class="btn btn-danger" onclick="downloadImage()">Descargar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="coloring-activity mt-5">
        <h2>Actividad de Colorear</h2>
        <div class="coloring-container">
            <!-- Paleta de colores -->
            <div class="color-palette">
                <!-- Colores originales -->
                <div class="color" style="background-color: #FF0000;" data-color="#FF0000"></div>
                <div class="color" style="background-color: #00FF00;" data-color="#00FF00"></div>
                <div class="color" style="background-color: #0000FF;" data-color="#0000FF"></div>
                <div class="color" style="background-color: #FFFF00;" data-color="#FFFF00"></div>
                <div class="color" style="background-color: #FFA500;" data-color="#FFA500"></div>
                <div class="color" style="background-color: #800080;" data-color="#800080"></div>

                <!-- Colores adicionales -->
                <div class="color" style="background-color: #FF1493;" data-color="#FF1493"></div> <!-- Rosa profundo -->
                <div class="color" style="background-color: #00FFFF;" data-color="#00FFFF"></div> <!-- Cian -->
                <div class="color" style="background-color: #32CD32;" data-color="#32CD32"></div> <!-- Verde lima -->
                <div class="color" style="background-color: #FF4500;" data-color="#FF4500"></div> <!-- Rojo naranja -->
                <div class="color" style="background-color: #4B0082;" data-color="#4B0082"></div> <!-- Índigo -->
                <div class="color" style="background-color: #FF69B4;" data-color="#FF69B4"></div> <!-- Rosa claro -->
                <div class="color" style="background-color: #1E90FF;" data-color="#1E90FF"></div> <!-- Azul dodger -->
                <div class="color" style="background-color: #FFD700;" data-color="#FFD700"></div> <!-- Oro -->
                <div class="color" style="background-color: #8B4513;" data-color="#8B4513"></div> <!-- Marrón silla de montar -->
                <div class="color" style="background-color: #008080;" data-color="#008080"></div> <!-- Verde azulado -->
                <div class="color" style="background-color: #FF6347;" data-color="#FF6347"></div> <!-- Tomate -->
                <div class="color" style="background-color: #40E0D0;" data-color="#40E0D0"></div> <!-- Turquesa -->
            </div>
            <!-- Área de dibujo -->
            <div class="drawing-area">
                <canvas id="drawing-canvas"></canvas>
            </div>
            <!-- Controles -->
            <div class="controls">
                <label for="brush-size">Grosor:</label>
                <input type="range" id="brush-size" min="1" max="20" value="5">
                <button class="btn btn-secondary" id="eraser-button">Borrador</button>
                <button class="btn btn-danger" id="clear-canvas">Borrar Todo</button>
                <button class="btn btn-success" id="download-canvas">Descargar Dibujo</button>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mt-4 mb-4">
        <div class="col-auto">
            <a href="@Url.Action("Index", "Home")" class="btn btn-warning">Regresar</a>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.min.js"></script>
</body>
</html>

@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>

        function downloadImage() {
            const modalContent = document.getElementById('modalContent');
            console.log(modalContent);
            // Verifica si el elemento existe antes de pasar a html2canvas
            if (modalContent) {
                html2canvas(modalContent).then(function (canvas) {
                    // Crear un enlace para la descarga
                    const link = document.createElement('a');
                    link.download = 'Nombre_Alumno.png';  // Nombre del archivo de descarga
                    link.href = canvas.toDataURL('image/png');  // Convertir el canvas a una URL de imagen
                    link.click();  // Simular un clic para descargar la imagen
                }).catch(function (error) {
                    console.error('Error al capturar el contenido:', error);
                });
            } else {
                console.error('Elemento con ID "modalContent" no encontrado.');
            }
        }

        function speak(text) {
            if ('speechSynthesis' in window) {
                // Cancel any ongoing speech synthesis
                window.speechSynthesis.cancel();

                const maxChunkLength = 200; // Maximum length of each chunk
                let chunks = [];

                // Function to split the text into chunks
                function splitTextIntoChunks(text) {
                    while (text.length > 0) {
                        let chunk = text.slice(0, maxChunkLength);
                        let lastSpaceIndex = chunk.lastIndexOf(' ');
                        if (lastSpaceIndex > 0 && text.length > maxChunkLength) {
                            chunk = chunk.slice(0, lastSpaceIndex);
                        }
                        chunks.push(chunk);
                        text = text.slice(chunk.length).trim();
                    }
                }

                splitTextIntoChunks(text);

                let utterance = new SpeechSynthesisUtterance();
                utterance.lang = 'es-ES';
                utterance.rate = 0.7;
                utterance.pitch = 1.3;

                // Set the voice
                let voices = window.speechSynthesis.getVoices();
                utterance.voice = voices.find(voice => voice.lang === 'es-ES' && voice.name.includes('Female')) || voices[0];

                let currentChunk = 0;

                utterance.onend = () => {
                    currentChunk++;
                    if (currentChunk < chunks.length) {
                        utterance.text = chunks[currentChunk];
                        window.speechSynthesis.speak(utterance);
                    }
                };

                utterance.onerror = (event) => {
                    console.error('SpeechSynthesisUtterance.onerror', event);
                };

                // Start speaking
                utterance.text = chunks[0];
                window.speechSynthesis.speak(utterance);

            } else {
                alert('Lo siento, tu navegador no soporta la síntesis de voz.');
            }
        }

        $(document).ready(function () {
            $('.btn-speak').on('click', function () {
                var text = $(this).data('text');
                speak(text);
            });

            // Ensure voices are loaded
            speechSynthesis.onvoiceschanged = () => {
                window.speechSynthesis.getVoices();
            };
        });

        document.addEventListener('DOMContentLoaded', function () {
            const gameContainer = document.getElementById('memory-game');
            gameContainer.classList.add('memory-game-container');
            const attemptsSpan = document.getElementById('attempts');
            const congratulationsModal = new bootstrap.Modal(document.getElementById('congratulationsModal'));

            let attempts = 0;
            let matchedPairs = 0;


            // Arreglo de frutas y verduras para el juego
            const items = [
                { name: 'Calabaza', image: '/Imagenes/CalabazaJ.png' },
                { name: 'Coco', image: '/Imagenes/CocoJ.png' },
                { name: 'Fresa', image: '/Imagenes/FresaJ.png' },
                { name: 'Brócoli', image: '/Imagenes/BrocoliJ.png' },
                { name: 'Naranja', image: '/Imagenes/NaranjaJ.png' },
                { name: 'Pepino', image: '/Imagenes/PepinoJ.png' },
                { name: 'Sandia', image: '/Imagenes/SandiaJ.png' },
                { name: 'Zanahoria', image: '/Imagenes/ZanahoriaJ.png' },
                { name: 'Banano', image: '/Imagenes/BananoJ.png' },
                { name: 'Elote', image: '/Imagenes/MaizJ.png' },
                { name: 'Tomate', image: '/Imagenes/TomateJ.png' },

                // Agrega más frutas y verduras según sea necesario
            ];

            const gameItems = [...items, ...items];
            shuffle(gameItems);

            gameItems.forEach((item, index) => {
                const card = document.createElement('div');
                card.className = 'memory-card';
                card.innerHTML = `
                <div class="memory-card-inner">
                    <div class="memory-card-front">
                        ?
                    </div>
                    <div class="memory-card-back">
                        <img src="${item.image}" alt="${item.name}">
                    </div>
                </div>
            `;
                card.dataset.name = item.name;
                gameContainer.appendChild(card);
            });

            let hasFlippedCard = false;
            let lockBoard = false;
            let firstCard, secondCard;

            function flipCard() {
                if (lockBoard) return;
                if (this === firstCard) return;

                this.classList.add('flipped');

                if (!hasFlippedCard) {
                    hasFlippedCard = true;
                    firstCard = this;
                    return;
                }

                secondCard = this;
                checkForMatch();
            }

            function checkForMatch() {
                attempts++;
                attemptsSpan.textContent = attempts;

                let isMatch = firstCard.dataset.name === secondCard.dataset.name;
                isMatch ? disableCards() : unflipCards();
            }

            function disableCards() {
                firstCard.removeEventListener('click', flipCard);
                secondCard.removeEventListener('click', flipCard);
                matchedPairs++;
                if (matchedPairs === items.length) {
                    setTimeout(() => {
                        showCongratulations();
                    }, 500);
                }
                resetBoard();
            }

            function unflipCards() {
                lockBoard = true;
                setTimeout(() => {
                    firstCard.classList.remove('flipped');
                    secondCard.classList.remove('flipped');
                    resetBoard();
                }, 1500);
            }

            function resetBoard() {
                [hasFlippedCard, lockBoard] = [false, false];
                [firstCard, secondCard] = [null, null];
            }

            function shuffle(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }

            function showCongratulations() {
                document.getElementById('finalAttempts').textContent = attempts;
                congratulationsModal.show();
            }

            document.querySelectorAll('.memory-card').forEach(card => card.addEventListener('click', flipCard));
        });

        //codigo para pintar
        document.addEventListener('DOMContentLoaded', function () {
            const canvas = document.getElementById('drawing-canvas');
            const ctx = canvas.getContext('2d');
            const colors = document.querySelectorAll('.color');
            const brushSize = document.getElementById('brush-size');
            const clearCanvasButton = document.getElementById('clear-canvas');
            const downloadButton = document.getElementById('download-canvas');
            const eraserButton = document.getElementById('eraser-button');

            // Ajustar el tamaño del canvas
            canvas.width = canvas.parentElement.clientWidth;
            canvas.height = canvas.parentElement.clientHeight;

            let painting = false;
            let currentColor = '#FF0000';  // Color inicial: rojo
            let currentBrushSize = brushSize.value;
            let isEraser = false;

            

            function drawBackground() {
                if (backgroundLoaded) {
                    ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);
                } else {
                    console.warn('La imagen de fondo no se ha cargado correctamente');
                }
            }


            function startPosition(e) {
                painting = true;
                draw(e);
            }

            function endPosition() {
                painting = false;
                ctx.beginPath();
            }

            function draw(e) {
                if (!painting) return;

                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                ctx.lineWidth = currentBrushSize;
                ctx.lineCap = 'round';

                if (isEraser) {
                    ctx.globalCompositeOperation = 'destination-out';
                } else {
                    ctx.globalCompositeOperation = 'source-over';
                    ctx.strokeStyle = currentColor;
                }

                ctx.lineTo(x, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x, y);
            }

            canvas.addEventListener('mousedown', startPosition);
            canvas.addEventListener('mouseup', endPosition);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseleave', endPosition);

            colors.forEach(color => {
                color.addEventListener('click', () => {
                    currentColor = color.getAttribute('data-color');
                    isEraser = false;
                });
            });

            brushSize.addEventListener('input', () => {
                currentBrushSize = brushSize.value;
            });

            eraserButton.addEventListener('click', () => {
                isEraser = true;
            });

            clearCanvasButton.addEventListener('click', () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawBackground();
            });

            downloadButton.addEventListener('click', () => {
                if (typeof html2canvas === 'undefined') {
                    console.error('html2canvas no está definido. Asegúrate de que la biblioteca se ha cargado correctamente.');
                    alert('Lo sentimos, ha ocurrido un error al intentar descargar la imagen. Por favor, recarga la página e intenta de nuevo.');
                    return;
                }

                // Capturar el área de dibujo completa
                html2canvas(document.querySelector('.drawing-area')).then(canvas => {
                    // Convertir el canvas a una imagen y descargar
                    const image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
                    const link = document.createElement('a');
                    link.download = 'mi_dibujo_coloreado.png';
                    link.href = image;
                    link.click();
                }).catch(error => {
                    console.error('Error al capturar la imagen:', error);
                    alert('Ha ocurrido un error al capturar la imagen. Por favor, intenta de nuevo.');
                });
            });
        });
    </script>
}