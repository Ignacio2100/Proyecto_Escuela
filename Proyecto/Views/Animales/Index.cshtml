@using Proyecto.Models;
@model Proyecto.Controllers.AnimalesController.AnimalesViewModel
@{
    ViewBag.Title = "Tipos de Animales";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agregar Nuevo Animal</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <style>

        .form-control {
            min-width: 100%;
        }
        
        .card {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* Espacia el contenido de la tarjeta */
        }

        .card-text {
            text-align: justify; /* Justifica el texto en el cuerpo de la tarjeta */
        }

        .btn-speak {
            align-self: center; /* Centra el botón horizontalmente */
            margin-top: auto; /* Empuja el botón al final del cuerpo de la tarjeta */
        }

        .card-img-top {
            width: 100%; /* Hace que la imagen ocupe todo el ancho del contenedor de la tarjeta */
            height: 350px;
            object-fit: cover; /* Asegura que la imagen cubra el área sin distorsionar */
        }

        #memory-board {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            gap: 15px; /* Espacio entre cartas */
            margin-top: 20px;
        }

        .memory-card {
            width: 100px;
            height: 100px;
            background-color: #3498db;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 40px;
            transition: transform 0.3s;
        }

            .memory-card:hover {
                transform: scale(1.1); /* Escala ligeramente la carta al pasar el ratón */
                background-color: #ffeb3b; /* Color de fondo más claro al pasar el ratón */
            }

            .memory-card.flipped {
                background-color: #fff;
                box-shadow: none; /* Elimina la sombra cuando la carta está volteada */
            }

        #attempts {
            margin-top: 20px;
            font-size: 1.5rem; /* Tamaño de fuente grande */
            color: white;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3); /* Sombra para mejor visibilidad */
        }
        .Memoria {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh; /* Ocupa toda la altura de la ventana del navegador */
            background: linear-gradient(to right, rgba(255, 223, 0, 0.7), rgba(0, 0, 0, 0.7)), url('https://www.toptal.com/designers/subtlepatterns/patterns/double-bubble.png'); /* Gradiente sobre patrón */
            background-size: cover, cover; /* Asegura que el patrón y el gradiente cubran todo el fondo */
            margin: 0;
            flex-direction: column;
            align-items: center;
        }

        h3 {
            color: #1E90FF; /* Color de texto brillante */
            margin-bottom: 20px;
            font-size: 2.5rem; /* Tamaño de fuente grande */
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3); /* Sombra para mayor impacto */
        }

       
    </style>
</head>
<body>
    <!-- APARTADO PARA AGREGAR ANIMAL -->

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="p-4 shadow bg-white rounded">
                    <div class="text-center mb-3">
                        <h3 class=" text-xxl-center">Agregar Nuevo Animal</h3>
                    </div>
                    @using (Html.BeginForm("Agregar", "Animales", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="row mb-4">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoAnimal.Nombre, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.NuevoAnimal.Nombre, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoAnimal.Nombre, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoAnimal.TipoAnimal, new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.NuevoAnimal.TipoAnimal, new List<SelectListItem>
                                {
                                    new SelectListItem { Text = "Seleccione un tipo", Value = "", Disabled = true, Selected = true },
                                    new SelectListItem { Text = "Mamíferos", Value = "Mamiferos" },
                                    new SelectListItem { Text = "Aves", Value = "Aves" },
                                    new SelectListItem { Text = "Reptiles", Value = "Reptiles" },
                                    new SelectListItem { Text = "Anfibios", Value = "Anfibios" },
                                    new SelectListItem { Text = "Vertebrados", Value = "Vertebrados" },
                                    new SelectListItem { Text = "Invertebrados", Value = "Invertebrados" }
                                }, new { @class = "form-select", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoAnimal.TipoAnimal, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.NuevoAnimal.ImagenUrl, "Imagen", new { @class = "form-label", required = "required" })
                                <input type="file" class="form-control" id="ImagenUrl" name="upload" accept=".jpg, .jpeg, .png">
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-12">
                                @Html.LabelFor(m => m.NuevoAnimal.Descripcion, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.NuevoAnimal.Descripcion, new { @class = "form-control", rows = "5", style = "width: 100%; box-sizing: border-box;", required = "required" })
                                @Html.ValidationMessageFor(m => m.NuevoAnimal.Descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn-primary">Guardar Animal</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="card-header m-4 text-xxl-center text-black fw-bold">
        <h3 class="mb-0">Tipos de Animales</h3>
    </div>


    <div class="accordion" id="animalAccordion">
        <!-- Mamíferos -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="mamiferosHeading">
                <button class="accordion-button text-center fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#mamiferosCollapse" aria-expanded="true" aria-controls="mamiferosCollapse">
                    Mamíferos
                </button>
            </h2>
            <div id="mamiferosCollapse" class="accordion-collapse collapse show" aria-labelledby="mamiferosHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var mamifero in Model.ListaMamiferos)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(mamifero.ImagenUrl))
                                    {
                                        <img src="@Url.Content(mamifero.ImagenUrl)" class="card-img-top" alt="@mamifero.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@mamifero.Nombre</h5>
                                        <p class="card-text">@mamifero.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@mamifero.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Aves -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="avesHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#avesCollapse" aria-expanded="false" aria-controls="avesCollapse">
                    Aves
                </button>
            </h2>
            <div id="avesCollapse" class="accordion-collapse collapse" aria-labelledby="avesHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var aves in Model.ListaAves)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(aves.ImagenUrl))
                                    {
                                        <img src="@Url.Content(aves.ImagenUrl)" class="card-img-top" alt="@aves.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@aves.Nombre</h5>
                                        <p class="card-text">@aves.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@aves.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Reptiles -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="reptilesHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#reptilesCollapse" aria-expanded="false" aria-controls="reptilesCollapse">
                    Reptiles
                </button>
            </h2>
            <div id="reptilesCollapse" class="accordion-collapse collapse" aria-labelledby="reptilesHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var reptiles in Model.ListaReptiles)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(reptiles.ImagenUrl))
                                    {
                                        <img src="@Url.Content(reptiles.ImagenUrl)" class="card-img-top" alt="@reptiles.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@reptiles.Nombre</h5>
                                        <p class="card-text">@reptiles.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@reptiles.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Anfibios -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="anfibiosHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#anfibiosCollapse" aria-expanded="false" aria-controls="anfibiosCollapse">
                    Anfibios
                </button>
            </h2>
            <div id="anfibiosCollapse" class="accordion-collapse collapse" aria-labelledby="anfibiosHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var anfibios in Model.ListaAnfibios)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(anfibios.ImagenUrl))
                                    {
                                        <img src="@Url.Content(anfibios.ImagenUrl)" class="card-img-top" alt="@anfibios.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@anfibios.Nombre</h5>
                                        <p class="card-text">@anfibios.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@anfibios.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- vertebrados -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="vertebradosHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#vertebradosCollapse" aria-expanded="false" aria-controls="vertebradosCollapse">
                    Vertebrados
                </button>
            </h2>
            <div id="vertebradosCollapse" class="accordion-collapse collapse" aria-labelledby="vertebradosHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var vertebrados in Model.ListaVertebrados)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(vertebrados.ImagenUrl))
                                    {
                                        <img src="@Url.Content(vertebrados.ImagenUrl)" class="card-img-top" alt="@vertebrados.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@vertebrados.Nombre</h5>
                                        <p class="card-text">@vertebrados.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@vertebrados.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Invertebrados -->
        <div class="accordion-item mb-3">
            <h2 class="accordion-header" id="invertebradosHeading">
                <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#invertebradosCollapse" aria-expanded="false" aria-controls="invertebradosCollapse">
                    Invertebrados
                </button>
            </h2>
            <div id="invertebradosCollapse" class="accordion-collapse collapse" aria-labelledby="invertebradosHeading" data-bs-parent="#animalAccordion">
                <div class="accordion-body">
                    <div class="row">
                        @foreach (var invertebrados in Model.ListaInvertebrados)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    @if (!string.IsNullOrEmpty(invertebrados.ImagenUrl))
                                    {
                                        <img src="@Url.Content(invertebrados.ImagenUrl)" class="card-img-top" alt="@invertebrados.Nombre">
                                    }
                                    else
                                    {
                                        <img src="~/Imagenes/Logo.png" class="card-img-top" alt="Imagen no disponible">
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@invertebrados.Nombre</h5>
                                        <p class="card-text">@invertebrados.Descripcion</p>
                                        <button class="btn btn-primary btn-speak" data-text="@invertebrados.Descripcion">
                                            <i class="fas fa-volume-up"></i> Escuchar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="Memoria">
        <h1>Memoria de Animales</h1>
        <div id="memory-board"></div>
        <div id="attempts">Intentos: 0</div>

    </div>

    <div class="row justify-content-center mt-4 mb-4">
        <div class="col-auto">
            <a href="@Url.Action("Index", "Home")" class="btn btn-danger">Regresar</a>
        </div>
    </div>

</body>
</html>

@section Scripts {

    <script>
        function speak(text) {
            if ('speechSynthesis' in window) {
                // Cancel any ongoing speech synthesis
                window.speechSynthesis.cancel();

                const maxChunkLength = 200; // Maximum length of each chunk
                let chunks = [];

                // Function to split the text into chunks
                function splitTextIntoChunks(text) {
                    while (text.length > 0) {
                        let chunk = text.slice(0, maxChunkLength);
                        let lastSpaceIndex = chunk.lastIndexOf(' ');
                        if (lastSpaceIndex > 0 && text.length > maxChunkLength) {
                            chunk = chunk.slice(0, lastSpaceIndex);
                        }
                        chunks.push(chunk);
                        text = text.slice(chunk.length).trim();
                    }
                }

                splitTextIntoChunks(text);

                let utterance = new SpeechSynthesisUtterance();
                utterance.lang = 'es-ES';
                utterance.rate = 0.7;
                utterance.pitch = 1.3;

                // Set the voice
                let voices = window.speechSynthesis.getVoices();
                utterance.voice = voices.find(voice => voice.lang === 'es-ES' && voice.name.includes('Female')) || voices[0];

                let currentChunk = 0;

                utterance.onend = () => {
                    currentChunk++;
                    if (currentChunk < chunks.length) {
                        utterance.text = chunks[currentChunk];
                        window.speechSynthesis.speak(utterance);
                    }
                };

                utterance.onerror = (event) => {
                    console.error('SpeechSynthesisUtterance.onerror', event);
                };

                // Start speaking
                utterance.text = chunks[0];
                window.speechSynthesis.speak(utterance);

            } else {
                alert('Lo siento, tu navegador no soporta la síntesis de voz.');
            }
        }

        $(document).ready(function () {
            $('.btn-speak').on('click', function () {
                var text = $(this).data('text');
                speak(text);
            });

            // Ensure voices are loaded
            speechSynthesis.onvoiceschanged = () => {
                window.speechSynthesis.getVoices();
            };
        });


        //codigo de memoria
        const animals = ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼'];
        const memoryBoard = document.getElementById('memory-board');
        const attemptsDisplay = document.getElementById('attempts');
        let cards = [...animals, ...animals];
        let flippedCards = [];
        let matchedPairs = 0;
        let attempts = 0;

        // Mezclar las cartas
        cards.sort(() => Math.random() - 0.5);

        // Crear las cartas en el tablero
        cards.forEach((animal, index) => {
            const card = document.createElement('div');
            card.className = 'memory-card';
            card.dataset.animal = animal;
            card.dataset.index = index;
            card.addEventListener('click', flipCard);
            memoryBoard.appendChild(card);
        });

        function flipCard() {
            if (flippedCards.length < 2 && !this.classList.contains('flipped')) {
                this.classList.add('flipped');
                this.textContent = this.dataset.animal;
                flippedCards.push(this);

                if (flippedCards.length === 2) {
                    attempts++;
                    attemptsDisplay.textContent = `Intentos: ${attempts}`;
                    setTimeout(checkMatch, 1000);
                }
            }
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;
            if (card1.dataset.animal === card2.dataset.animal) {
                matchedPairs++;
                if (matchedPairs === animals.length) {
                    alert(`¡Felicidades! Has completado el juego en ${attempts} intentos.`);
                }
            } else {
                card1.classList.remove('flipped');
                card2.classList.remove('flipped');
                card1.textContent = '';
                card2.textContent = '';
            }
            flippedCards = [];
        }
    
    </script>
}